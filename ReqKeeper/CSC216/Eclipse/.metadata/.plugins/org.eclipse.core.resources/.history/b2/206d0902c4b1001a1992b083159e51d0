/**
 * 
 */
package edu.ncsu.csc216.tracker.model;

import java.util.List;

import edu.ncsu.csc216.tracker.requirement.Command;
import edu.ncsu.csc216.tracker.requirement.Requirement;
import edu.ncsu.csc216.tracker.xml.Req;

/**
 * A container class that holds a list of Requirement objects.  Has functionality
 * to add/remove Requirements, search for a Requirement, update a Requirement,
 * and the ability to return a list or sublist of Requirements contained in the RequirementList
 * @author Zach Giles
 *
 */
public class RequirementsList {

	/**
	 * Creates an empty RequirementsList
	 */
	public RequirementsList() {
		
	}
	/**
	 * Adds a Requirement
	 * @param summary the Requirement summary
	 * @param acceptanceTestId the Requirement acceptance test id
	 * @return int the Requirement id
	 */
	public int addRequirement(String summary, String acceptanceTestId) {
		return 0;
	}
	/**
	 * Adds Requirements from XML data
	 * @param reqList a List of Requirements in XML format
	 */
	public void addXMLReqs(List<Req> reqList) {
		
	}
	/**
	 * Gets a the Requirements in the RequirementsList
	 * @return a List of Requirement Objects
	 */
	public List<Requirement> getRequirements() {
		return null;
	}
	/**
	 * Gets a Requirement object from the RequirementsList by its unique ID
	 * @param id the unique ID of the Requirement Object you want to get
	 * @return The Requirement Object with the inputed id
	 */
	public Requirement getRequirementById(int id) {
		return null;
	}
	/**
	 * Modifies a Requirement in the RequirementsList by executing a Command on the Requirement
	 * @param id Id of Requirement you want to execute the Command on
	 * @param c Command/State change you want to execute
	 */
	public void executeCommand(int id, Command c) {
		
	}
}
